#include <iostream>
#include <stdlib.h>
#include <conio.h>
#include <iomanip>
#include <Windows.h>
#include <string.h>
#include <algorithm>
#include "Data.h"
#include "Student.h"
#include "my_templates.h"

using namespace std;

int cmp_incr(const void* a, const void* b) {
    
    /*int arg1 = *(const int*)a;
    int arg2 = *(const int*)b;

    if (arg1 < arg2) return -1;
    if (arg1 > arg2) return 1;

    return 0;*/

    return *(const int*)a - *(const int*)b;

}

int cmp_decr(const void* a, const void* b) {

    return *(const int*)b - *(const int*)a;

}

int main()
{


#if 0

    Student s1{ "Ivanovcenco", "Ivan", "UTM", 10,9,6,7,8, 15,2,2001 };

    const int N = 5;

    Student mas[N]{
        {"Borisov", "Boris", "STEP", 9,10,8,9,10, 25,1,2002},
        s1,
        {"Anisimova", "Kate", "UTM", 9,10,8,9,10, 2,3,2000},
        {"Dmitrov", "Dima", "UTM", 9,10,8,10,10, 22,8,2001},
        {"Bornikov", "Timur", "Univer", 7,10,8,10,10, 22,8,2002},
    };

    cout << "\nМассив студентов: \n";
    show(mas, N);

    sort(mas, N, cpm_by_year_decr);

    cout << "\nМассив студентов после сортировки: \n";
    show(mas, N);

#endif

    // ----------------------------------------------------------------------------------------------------------------------- \\

#if 0

    // -------------------------------------------------------------------------------- \\
    // использование сортировки из библиотеки STL
    // sort - STL

    const int N = 5;

    Student s1{ "Ivanovcenco", "Ivan", "UTM", 10,9,6,7,8, 15,2,2001 };

    Student mas[N]{
        {"Borisov", "Boris", "STEP", 9,10,8,9,10, 25,1,2002},
        s1,
        {"Anisimova", "Kate", "UTM", 9,10,8,9,10, 2,3,2000},
        {"Dmitrov", "Dima", "UTM", 9,10,8,10,10, 22,8,2001},
        {"Bornikov", "Timur", "Univer", 7,10,8,10,10, 22,8,2002},
    };

    cout << "\nМассив студентов: \n";
    show(mas, N);

    
    cout << "\nМассив студентов после сортировки: \n";
    sort(mas, mas + N, cpm_by_year_decr);
    show(mas, N);

#endif

    // ----------------------------------------------------------------------------------------------------------------------- \\

#if 0

    // -------------------------------------------------------------------------------- \\
    // Указатель и структура ----------------------------------------------------------

    Student s1{ "Ivanovcenco", "Ivan", "UTM", 10,9,6,7,8, 15,2,2001 };

    cout << s1.name << endl;
    
    Student* p = &s1;
    // -> Оператор косвенного доступа
    cout << p->name << endl;

    //show(s1);
    show(*p); // *p Оператор разыменования

    // -------------------------------------------------------------------------------- \\
    // Динамическое выделение памяти для обьекта структуры ----------------------------
    
    Student* p2 = new Student; // new C++
    if (p2)
    {
        init(*p2);
        show(*p2);

        delete p2;
        p2 = nullptr;
    }


#endif

    // ----------------------------------------------------------------------------------------------------------------------- \\

#if 0
    // -------------------------------------------------------------------------------- \\
    // Динамическое выделение памяти для обьекта структуры ----------------------------

    int size;
    cout << "\nВведите количество элементов массива: ";
    cin >> size; // Не считывает пробелы и Enter если после него будет cin.getline то он считает этот пробел и поле будет пустым.
    cin.get(); // считывает Enter

    Student* arr = new Student[size]; // new C++
    if (arr)
    {
        for (int i = 0; i < size; i++)
        {
            init(arr[i]);
            cin.get();
        }

        cout << "\nМассив студентов: \n";

        for (int i = 0; i < size; i++)
        {
            show(arr[i]);
        }

        delete[] arr;
        arr = nullptr;
    }

#endif


    // ----------------------------------------------------------------------------------------------------------------------- \\
    *********************************************** Текущая дата и время *****************************************************
#if 0
    // -------------------------------------------------------------------------------- \\
    // Текущая дата и время -----------------------------------------------------------

    // tm - тип структура
    tm now; // now  - обьект структуры

    time_t t;
    time(&t);
    errno_t err;

    err = localtime_s(&now, &t);

    cout << "\nДата: " << now.tm_wday << "." << now.tm_mon + 1 << "." << now.tm_year + 1900 << endl;

    cout << "Время: " << now.tm_hour << ":" << now.tm_min << ":" << now.tm_sec << endl;

    cout << "Номер дня недели " << now.tm_wday << endl;

    cout << "Номер дня в году " << now.tm_yday << endl;

    // asctime_s() Выдает дату в строке -----------------------------------------------------------
    char buf[50];
    err = asctime_s(buf, sizeof(buf), &now);
    
    if (!err)
    {
        cout << buf << endl;
    }else{
            cout << "\nError";
    }

#endif

    // ----------------------------------------------------------------------------------------------------------------------- \\

#if 0

    // -------------------------------------------------------------------------------- \\
    // Ввод-вывод данных, C -----------------------------------------------------------

    // http://www.c-cpp.ru/content/scanf
    // https://metanit.com/cpp/c/2.14.php
    // http://www.c-cpp.ru/books/chtenie-i-zapis-simvolov
    // https://metanit.com/cpp/c/2.4.php

    // -------------------------------------------------------------------------------- \\
    // Вывод данных на экран ----------------------------------------------------------

    /*
        %d - int
        %f - float
        %lf - double
        %g
        %c - char
        %s - char[]
    */

    cout << "Hello, World C++! \n"; // C++
    printf("Привет, мир Си! \n");  // Си

    int a = 10, b = 4;
    double d = 25.12865478;
    char s = '#';
    char str[20] = "Hello, World";

    printf("a = %d\nb = %d", a, b); // cout << "a = " << a;
    printf("\n%f", d);
    printf("\n%.2f", d); // %.2f - 2 знака после точки
    printf("\n%10.2f", d); // 10 - setw(10);
    printf("\ns = %c", s);
    printf("\nСтрока: %s\n", str);

#endif

    // ----------------------------------------------------------------------------------------------------------------------- \\

#if 0

    /*
        %d - int
        %f - float
        %lf - double
        %g
        %c - char
        %s - char[]
        %p - обращение к адресу
    */

    // -------------------------------------------------------------------------------- \\
    // Ввод данных с клавы ------------------------------------------------------------

    //int a;
    
    //printf("Введите целое число: ");
    //scanf_s("%d", &a);
    //printf("a = %d", a);

    //float b;
    //printf("Введите дробное число: ");
    //scanf_s("%f", &b);
    //printf("b = %f", b);
    //printf("\nb = %.2f", b);

    //cin.get();

    //char s;
    //printf("Введите символ: ");
    //scanf_s("%c", &s, 1);  // Вариант 1
    //// s = getchar(); // Вариант 2 
    //// s = _getch(); // Вариант 3
    //printf("s = %c", s);

    //char str[50];
    //printf("Введите строку: ");
    //// scanf_s("%s", str, sizeof(str)); // Вариант 1 - считывание до пробела
    //gets_s(str, sizeof(str)); // Вариант 2 считываение строки польностью с пробелами
    //printf("\nСтрока: %s\n", str);


    //int a;
    //double d;
    //char s;
    //char str[20];

    //printf("\nВведите данные: ");
    //int r = scanf_s("%d %lf %c %s", &a, &d, &s, 1, str, sizeof(str));

    //printf("%d %lf %c %s", a, d, s, str);
    //printf("\nКоличество данных: %d", r);


#endif

     // ----------------------------------------------------------------------------------------------------------------------- \\

#if 0

    // -------------------------------------------------------------------------------- \\
    // Указатели на void --------------------------------------------------------------

    int a = 8;
    int* ptr = &a;

    printf("\nАдрес: %p Значение: %d", ptr, *ptr);

    // double* d = &a; // error
    void* v = &a;

    printf("\nАдрес: %p Значение: %d", v, *(int*)v);
    *(int*)v = 100;
    printf("\nАдрес: %p Значение: %d", v, *(int*)v);

    double d = 12.789;
    v = &d;

    printf("\nАдрес: %p Значение: %lf", v, *(double*)v);
    

#endif

    // ----------------------------------------------------------------------------------------------------------------------- \\

#if 0

    // -------------------------------------------------------------------------------- \\
    // Сортировка qsort - алгоритм Си -------------------------------------------------

    const int N = 10;
    int mas[N]{ 12,9, -2563,45,89,4,12,-2563,14,56 };
    
    printf("\nИсходный массив: \n");
    for (int x : mas)
    {
        printf("%d ", x);
    }

    qsort(mas, N, sizeof(int), cmp_incr);

    printf("\nМассив после сортировки по возрастанию: \n");
    for (int i = 0; i < N; i++)
    {
        printf("%d ", mas[i]);
    }

    qsort(mas, N, sizeof(int), cmp_decr);


    printf("\nМассив после сортировки по убыванию: \n");
    for (int i = 0; i < N; i++)
    {
        printf("%d ", mas[i]);
    }

#endif

    // ----------------------------------------------------------------------------------------------------------------------- \\

#if 0

    // -------------------------------------------------------------------------------- \\
    // memcpy_s

    const int N = 10;
    int mas[N]{ 12,9, -2563,45,89,4,12,-2563,14,56 }, copy[N]{ 0 };

    for (int v : copy)
    {
        printf("%d ", v);
    }

    printf("\n");

    memcpy_s(copy, sizeof(copy), mas, sizeof(mas));

    for (int v : copy)
    {
        printf("%d ", v);
    }

#endif

#if 1

    // -------------------------------------------------------------------------------- \\
    // Динамическое выделение памяти в Си ---------------------------------------------
    // malloc

    int* a = new int;
    if (a)
    {
        *a = 20;
        cout << *a;
        delete a;
        a = nullptr;
    }

    printf("\n");

    int* b = (int *)malloc(sizeof(int));
    if (b)
    {
        *b = 78;
        printf("%d", *b); // cout << *b;

        free(b);  // delete b;
        b = nullptr;
    }


#endif




    _getch();
}