#include <iostream>
#include <stdlib.h>
#include <conio.h>
#include <iomanip>
#include <Windows.h>
#include "Color.h"


using namespace std;

// ---------------------------------------- Одномерные ---------------------------------------------------- \\
// -------------------------------------------------------------------------------------------------------- \\

void show(int* m, int size);
void init(int* m, int size, int a, int b);
int* memory(int size);
void destroy(int*& m);

// ---------------------------------------- Матрица ------------------------------------------------------- \\
// -------------------------------------------------------------------------------------------------------- \\

int** memory(int row, int col);
void init(int** m, int row, int col, int a = 1, int b = 10);
void show(int** m, int row, int col);
void destroy(int**& m, int row);


// ---------------------------------------- work func ----------------------------------------------------- \\
// -------------------------------------------------------------------------------------------------------- \\

void delete_value(int*& arr, int& size, bool negative = true );
void delete_row(int**& arr, int &row, int col, int id_row);
bool is_glas(char s);
void green_red_blue_text(const char* s);
void digit_all(const char* s, int& number, int& alpha, int& space, int& glas, int& other);
int get_digit_from_str(const char* s);

int main()
{

    //setlocale(LC_ALL, "rus");

#if 0
    // ---------------------------------------------------------------------------------------------------------------- //
    // ************************************************** Задание 1 *************************************************** //
    //  Задание 1: Дан динамический одномерный массив целых : А[m](m вводится с клавиатуры).
    //  Необходимо написать одну функцию, которая удаляет из массива положительные или
    //  отрицательные значения в зависимости от дополнительного параметра типа bool(по умолчанию
    //  – удаляются отрицательные значения). (Меняется исходный массив и его размер).

    srand(time(0));
    int size;
    cout << "\nВведите размер массива: ";
    cin >> size;

    int* m = memory(size);

    if (m)
    {
        init(m, size, -10, 20);
        show(m, size);

        delete_value(m, size, true);
        cout << "\nРазмер нового массива: " << size << endl;
        show(m, size);

        destroy(m);
    }
    else {
        cout << "\nОшибка выделения памяти";
    }


#endif 


#if 0
    // ---------------------------------------------------------------------------------------------------------------- //
    // ************************************************** Задание 2 *************************************************** //
    //  Задание 2: Напишите функцию, которая удаляет из динамической матрицы целого типа строку
    //  по указанной позиции. (Меняется исходный массив и количество строк).

    int row, col;
    cout << "\nВведи количество строк, колонок: ";
    cin >> row >> col;

    int** res = memory(row, col);
    if (res)
    {
        init(res, row, col, -20, 20);
        show(res, row, col);
        cout << endl << endl;
        delete_row(res, row, col, 2);
        show(res, row, col);
        destroy(res, row);
    }

#endif 

#if 0
// ---------------------------------------------------------------------------------------------------------------- //
// ************************************************** Задание 3 *************************************************** //
    //    Задание 3: Напишите программу, которая формирует динамическую матрицу целых с разной
    //    длиной строк(jagged arrays)
    //    Количество строк вводится с клавиатуры.
    //    Значение первого элемента каждой строки инициализируется случайным числом(от 1 до 20) и определяет
    //    количество столбцов в этой строке.Значения остальных элементов матрицы также
    //    инициализируются случайными числами.Например,
    //    Введите количество строк 5
    //    2 18
    //    5 1 20 25 29
    //    9 13 15 6 46 32 28 12 42
    //    6 43 28 3

    srand(time(0));

    int row;
    cout << "\nВведите кол-во строк: ";
    cin >> row;

    int** arr = new int*[row];

    if (arr)
    {
        // Массив для хранения кол-во колонок каждой строки матрицы
        int* arr_col = new int[row];

        for (int i = 0; i < row; i++)
        {

            int num = rand() % 20 + 1;
            arr_col[i] = num; 
            arr[i] = new int[arr_col[i]]; // Выделение памяти под каждую строку

            for (int j = 1; j < arr_col[i]; j++)
            {
                arr[i][0] = num;
                arr[i][j] = rand() % 20 + 1;
            }
        }

        // Вывод матрицы повторно  отдельно
        cout << endl << endl;
        cout << "\nДанные по кол-ву колонок в каждой строке: ";
        for (int k = 0; k < row; k++)
        {
            cout << arr_col[k] << "   ";
        }

        cout << endl << endl;

        for (int i = 0; i < row; i++)
        {
            for (int j = 0; j < arr_col[i]; j++)
            {
                cout << setw(5) << arr[i][j];
            }
            cout << endl;
        }

        if (arr_col)
        {
            delete[]arr_col;
            arr_col = nullptr;
        }
        // ...
        for (int i = 0; i < row; i++)
        {
            delete[]arr[i];
        }
        delete[]arr;
        arr = nullptr;
    }

#endif 


#if 0
// ---------------------------------------------------------------------------------------------------------------- //
// ************************************************** Задание 4 *************************************************** //
    //    Задание 4: Пользователь вводит строку символов с клавиатуры.Перевести все гласные символы
    //    в верхний регистр и при выводе строки на экран все гласные символы выделить другим цветом.
    //    Использовать уже существующую функцию, которая определяет, является ли символ
    //    гласным.

    char str[200];
    cout << "\nВведите строку: ";
    cin.getline(str, sizeof(str));
    cout << endl;
    cout << "\nСтрока после обработки: ";
    for (int i = 0; i < strlen(str) + 1; i++)
    {
        is_glas(str[i]) ? str[i] = toupper(str[i]) : str[i];
        is_glas(str[i]) ? (SetColor(4), cout << str[i]) : (SetColor(7), cout << str[i]);

    }




#endif


#if 0
// ---------------------------------------------------------------------------------------------------------------- //
// ************************************************** Задание 5 *************************************************** //
    //    Задание 5: Пользователь вводит с клавиатуры строку.Необходимо написать функцию, которая
    //    принимает строку и выводит ее на экран, выделяя разными цветами : символы алфавита -
    //    зеленым, знаки препинания - красным, цифры - синим.

    char str[200];
    cout << "\nВведите строку: ";
    cin.getline(str, sizeof(str));
    green_red_blue_text(str);

#endif

#if 0
// ---------------------------------------------------------------------------------------------------------------- //
// ************************************************** Задание 6 *************************************************** //
    //    Задание 6: Напишите одну функцию, которая принимает строку, подсчитывает и возвращает
    //    количество букв, цифр, пробелов, гласных, знаков и остальных символов, присутствующих в
    //    строке.

    int number, alpha, space, glas, other;
    char str[] = "Hello World! %%%% (28.03.23) %%%% !@#";
    digit_all(str, number, alpha, space, glas, other);
    cout << "\nВсего символов: " << strlen(str);
    cout << "\nКоличество цифр: " << number;
    cout << "\nКоличество букв: " << alpha;
    cout << "\nКоличество пробелов: " << space;
    cout << "\nКоличество гласных: " << glas;
    cout << "\nКоличество знаков и остальных символов: " << other;


#endif


#if 0
// ---------------------------------------------------------------------------------------------------------------- //
// ************************************************** Задание 7 *************************************************** //
    //   Задание 7: Найти и посчитать все вхождения подстроки в строку, перевести в верхний регистр и
    //   при выводе выделить другим цветом.Пример работы программы :
    //   filename.TXT test.TXT myfile.TXT simplefile
    //   Количество вхождений подстроки.TXT в строку : 3

    char str[] = "filename.txt test.txt myfile.txt simplefile", sub_str[] = ".txt";
    int br = strlen(sub_str);
    int cr = strlen(str);

    char* p = strstr(str, sub_str);
    int repeat = 0;

    if (p)
    {
        while (p)
        {
            repeat++;
            for (int i = 0; i < br; i++)
            {
                p[i] = toupper(p[i]);
            }

            p += br;
            p = strstr(p, sub_str);
        }
        
        SetColor(3);
        cout << str << endl;

        cout << "\nКоличество вхождений подстроки " << sub_str << " в строку :" << repeat;
    }
    else {
        cout << "\nПодстроки в троке нет";
    }

#endif


#if 0
// ---------------------------------------------------------------------------------------------------------------- //
// ************************************************** Задание 8 *************************************************** //
     //   Задание 8: На основе строки сформировать динамический массив целых, записав данные по
     //   цифрам.Пример работы программы :
     //   Строка: 235A65TR789
     //   Массив цифр : 2 3 5 6 5 7 8 9

    char str[] = "235A65TR789";
    int length = strlen(str);
    int size = 0;
    int b = 0;
    for (int i = 0; i < length; i++)
    {
        isdigit(str[i]) ? size++ : size;
    }

    int* arr = new int[size];

    for (int i = 0; i < length;i++)
    {
        isdigit(str[i]) ? arr[b++] = (int)str[i] - 48 : str[i];
    }

    cout << "\n Массив цифр : ";
    show(arr, size);

    delete[]arr;
    arr = nullptr;

#endif

#if 0
// ---------------------------------------------------------------------------------------------------------------- //
// ************************************************** Задание 9 *************************************************** //
    //   Задание 9: Написать функцию, которая принимает строку, и возвращает целое число,
    //   сформированное на ее основе.Если символов - цифр в строке нет, функция возвращает 0.
    //   Пример работы программы :
    //   Строка: 12A65H21E1
    //   Число : 1265211

    char str[] = "12A65H21E1";

    cout << get_digit_from_str(str);

#endif


    _getch();
}

// ---------------------------------------- work func ----------------------------------------------------- \\
// -------------------------------------------------------------------------------------------------------- \\

int get_digit_from_str(const char* s)
{
    int b = -1;
    char str_c[100];

    for (int i = 0; i < strlen(s); i++)
    {
        isdigit(s[i]) ? str_c[++b] = s[i] : s[i];
    }

    return b < 0 ? 0 : atoi(str_c);
}

void digit_all(const char* s, int& number, int& alpha, int& space, int& glas, int& other)
{
    number = 0, alpha = 0, space = 0, glas = 0, other = 0;
    for (int i = 0; i < strlen(s); i++)
    {
        isdigit(s[i]) ? number++ : number;
        isalpha(s[i]) ? alpha++ : alpha;
        isspace(s[i]) ? space++ : space;
        is_glas(s[i]) ? glas++ : glas;
        ispunct(s[i]) ? other++ : other;

    }
}

void green_red_blue_text(const char* s)
{
    for (int i = 0; i < strlen(s); i++)
    {
        if (isdigit(s[i]) || s[i] == ' ')
        {
            SetColor(1);
            cout << s[i];
        }
        else if (isalpha(s[i]) || s[i] == ' ')
        {
            SetColor(2);
            cout << s[i];
        }
        else if (isgraph(s[i]) || s[i] == ' ') {
            SetColor(12);
            cout << s[i];
        }
    }
}

bool is_glas(char s) // aoueiyAOUEIY
{
    char gl[] = "aoueiyAOUEIY";
    for (int i = 0; i < gl[i]; i++)
    {
        if (s == gl[i])
        {
            return true;
        }
    }
    return false;
}

void delete_value(int*& arr, int &size, bool negative)
{
    int k = 0;
    int neg = 0;
    int pos = 0;

    for (int i = 0; i < size; i++)
    {
        arr[i] < 0 ? neg++ : pos++;
    }

    int* res;

    negative ? res = new int[size - neg] : res = new int[size - pos];

    for (int i = 0; i < size; i++)
    {
        if (res && negative && arr[i] < 0 || !negative && arr[i] >= 0)
        {
            continue;
        }
        res[k] = arr[i];
        k++;
    }

    

    delete[]arr;
    arr = res;
    size = k;
}

void delete_row(int**& arr, int& row, int col, int id_row)
{
    int** arr2 = new int* [row];
    // Копирование адресов строк исходного массива в новый массив адресов

    if (arr2)
    {
        for (int i = 0; i < id_row; i++)
        {
            arr2[i] = arr[i];
        }

        for (int i = id_row; i < row; i++)
        {
            arr2[i - 1] = arr[i];
        }
    }

    row--;

    arr2[row] = new int[col];

    for (int j = 0; j < col; j++)
    {
        arr2[row][j] = arr[row][j]; //копирование данных добавляемой троки
    }

    delete[]arr;
    arr = arr2; // запись нового адреса вместо старого
    
}


// ---------------------------------------- Одномерные ---------------------------------------------------- \\
// -------------------------------------------------------------------------------------------------------- \\

void destroy(int*& m)
{
    delete[]m;
    m = nullptr;
}

int* memory(int size)
{
    int* p = new int[size];
    return p;
}

void init(int* m, int size, int a, int b)
{
    for (int i = 0; i < size; i++)
    {
        *(m + i) = rand() % (b - a + 1) + a;
    }
}

void show(int* m, int size)
{
    for (int i = 0; i < size; i++)
    {
        cout << m[i] << "  ";
    }
    cout << endl;
}



// ---------------------------------------- Матрица ------------------------------------------------------- \\
// -------------------------------------------------------------------------------------------------------- \\

int** memory(int row, int col)
{
    // Выделение памяти под одномерный массив адресов(=указателей) строк матрицы
    int** mas = new int* [row];
    // Выделение памяти под каждую строку матрицы(=под одномерный массив)
    for (int i = 0; i < row; i++)
    {
        mas[i] = new int[col];
    }
    return mas;
}
//---------------------------------------------
void init(int** mas, int row, int col, int a, int b)
{
    if (a > b)
    {
        int t = a;
        a = b;
        b = t;
    }
    //Инициализация значений матрицы на экран
    for (int i = 0; i < row; i++)
    {
        for (int j = 0; j < col; j++)
        {
            mas[i][j] = rand() % (b - a + 1) + a;
        }
    }
}
//---------------------------------------------
void show(int** mas, int row, int col)
{
    //вывод на экран
    for (int i = 0; i < row; i++)
    {
        for (int j = 0; j < col; j++)
        {
            cout << setw(6) << mas[i][j];
        }
        cout << endl;
    }
}
//---------------------------------------------
void destroy(int**& mas, int row)
{
    //Освобождение памяти:
        // Освобождаем память, выделенную под строки матрицы
    for (int i = 0; i < row; i++) {
        delete[]mas[i];
    }
    // Освобождаем память, выделенную под адреса строк
    delete[]mas;
}

