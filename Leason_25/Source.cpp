#include <iostream>
#include <stdlib.h>
#include <conio.h>
#include <iomanip>
#include <Windows.h>
#include "array_functions.h"
#include "help_functions.h"
#include "my_template.h"
#include "color.h"

using namespace std;


int main()
{

    //setlocale(LC_ALL, "rus");

    // ---------------------------------------------------------------------------------------------------------------- //
    // ************************************************** УКАЗАТЕЛИ *************************************************** //
    // Указатель - это особый тип, которрый в качестве значения хранит адрес.
    // Обьявление указателя: тип * имя;
#if 0
    int a = 10;
    cout << "\nАдрес: " << &a << endl;

    // 1. Инициализация указателя: адрес существующей переменной

    int* ptr; // Обьявление указателя на int или так int* ptr = &a;
    ptr = &a; // Инициализация указателя

    // *ptr - взятие значения по адресу (разименование указателя)
    cout << "\nАдрес: " << &a << " = " << ptr;
    cout << "\nАдрес ptr: " << &ptr << endl;
    cout << "\nЗначение: " << a << " = " << *ptr; // 10 10

    *ptr = 200; // Изминение значения по адресу, который хранит указатель.

    cout << "\nЗначение: " << a << " = " << *ptr; // 200 200

    int* ptr2 = &a;

    *ptr2 = 300;

    cout << "\nЗначение: " << a << " = " << *ptr << " = " << *ptr2; // 300 300 300

    cout << endl << endl;

    double d = 2.15;
    //int* pd = &d; // error
    double* pd = &d;

    cout << "\nАдрес: " << &d << " = " << pd;
    cout << "\nАдрес ptr: " << &pd << endl;
    cout << "\nЗначение: " << d << " = " << *pd; // 2.15 2.15

    cout << "\nОбьем памяти под указатель: " << sizeof(ptr) << "  " << sizeof(pd);
    cout << endl << endl;

    // 2. Инициализация указателя: нулевым адресом --------------------------------------------------

    float* fp = nullptr;

    if (fp)
    {
        cout << *fp;
    }
    else {
        cout << "\nУказатель не инициализирован: ";
        cout << fp;
    }

    cout << endl << endl;

    // 3. Инициализация указателя: значение другого указателя --------------------------------------------

    int x = 456;
    // int* k1, k2; // Обьявление указателя на int и целого
    int* k1, * k2; // Обьявление двух указателей 

    k1 = &x;
    k2 = k1; // Инициализация указателя: значение другого указателя

    cout << "\nАдрес-значение указателей: " << &x << " = " << k1 << " = " << k2;
    cout << "\nЗначение по указателям: " << x << " = " << *k1 << " = " << *k2;
    cout << "\nАдрес k1 " << &k1;
    cout << "\nАдрес k2 " << &k2;

    cout << endl << endl;

#endif

#if 0

    // Арифметика указателей -------------------------------------------------------------------------------------
    // 4. Инициализация указателя: адресом одномерного массива ---------------------------------------------------

    srand(time(0));
    const int N = 10;
    int m[N];

    for (int i = 0; i < N; i++)
    {
        m[i] = rand() % 21 - 10;
        cout << m[i] << "  ";
    }
    cout << setw(2);
    cout << endl << "Адрес массива: " << m << " = " << &m[0] << endl;
    cout << "\nЗначение m[0]: " << *m << " = " << m[0];
    cout << "\nЗначение m[1]: " << *(m + 1) << " = " << m[1];
    cout << "\nЗначение m[2]: " << *(m + 2) << " = " << m[2];
    cout << "\nЗначение m[3]: " << *(m + 3) << " = " << m[3];
    cout << "\nЗначение m[4]: " << *(m + 4) << " = " << m[4];
    cout << "\nЗначение m[5]: " << *(m + 5) << " = " << m[5];
    cout << "\nЗначение m[6]: " << *(m + 6) << " = " << m[6];
    cout << "\nЗначение m[7]: " << *(m + 7) << " = " << m[7];
    cout << "\nЗначение m[8]: " << *(m + 8) << " = " << m[8];
    cout << "\nЗначение m[9]: " << *(m + 9) << " = " << m[9];

    cout << endl;
    
    *(m + 1) = 5000; // Изменение значения по адресу m + 1

    // m + i - адрес значения по индексу i
    cout << "\nАдреса элементов массива: \n";
    for (int i = 0; i < N; i++)
    {
        cout << m + i << "  ";
    }

    // *(m + i) - значения по индексу i
    cout << "\n\nЗначения элементов массива: \n";
    for (int i = 0; i < N; i++)
    {
        cout << *(m + i) << "  "; // m[i]
    }

    cout << endl;
    // m - константный указатель(значение менять можнно, адрес нельзя)
    // m++; // error

    // Инициализация указателя : адресом одномерного массива
    // int* pm - скалярный указатель.
    int* pm = m; // Указатель = указатель // Инициализация указателя : адресом одномерного массива

    for (int i = 0; i < N; i++)
    {
        cout << *(pm + i) << "  "; // pm[i]
        //cout << pm[i] << "  ";
    }

    cout << "\n" << pm << "  " << *pm;
    pm++; // Изменение адреса
    cout << "\n" << pm << "  " << *pm;
    (* pm)++; // Изменение значения
    cout << "\n" << pm << "  " << *pm;
    // pc - указатель на константу
    const int* pc = &N; // pc - указатель на константу
    // *pc = 20; // error



    /*
    Использование спецификатора const с указателями : 

    1.    int *ptr – это скалярный указатель.
    Можно изменить значение, на которое он указывает:         (*ptr )++;
    Можно изменить значение (адрес), которое в нем содержится:      ptr++; 

    2.    const int *ptr – это указатель на константу.
    Нельзя изменить значение, на которое он указывает:        (*ptr )++; // ошибка
    Можно изменить значение (адрес), которое в нем содержится:      ptr++; 

    3.    int * const ptr -  это константный указатель.
    Можно изменить значение, на которое он указывает:         (*ptr )++;
    Нельзя изменить значение (адрес), которое в нем содержится: ptr++;    // ошибка 

    4.    const int * const ptr – это константный указатель на константу.
    Ничего менять нельзя.

    */



#endif


#if 0

    // Вывести данные массива, используя ноиацию указателей
    // (без квадратных скобок [])

    const int N = 5;
    int m[N]{ 5,-9,8,5,6 };

    for (int i = 0; i < N; i++)
    {
        cout << *(m + i) << "  ";
    }

    cout << endl;

    // Вывест данные масства, используя скалярный указатель
    // и арифметику указателей в прямом порядке

    int* p = m;

    for (int i = 0; i < N; i++)
    {
        cout << *(p + i) << "  "; // p[i]
    }

    cout << endl;

    for (int i = 0; i < N; i++, p++)
    {
        cout << *p << "  ";
        //p++; // Изменение адреса
    }

    cout << endl << *p; // выход за пределы массива 

    // p = &m[N-1];
    p = m + N - 1;
    // Вывест данные масства, используя скалярный указатель
    // и арифметику указателей в обратном порядке

    for (int i = 0; i < N; i++, p--)
    {
        cout << *p << "  ";
    }

#endif


    // 5. Инициализация указателя известным адресом ---------------------------------------------------------
    // int * pa = (int *)(адрес)




    _getch();
}